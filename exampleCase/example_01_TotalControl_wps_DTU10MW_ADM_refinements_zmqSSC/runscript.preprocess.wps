#!/bin/bash
#PBS -N wps.preprocess
#PBS -l nodes=1:ppn=1

# User input
OpenFOAMversion=2.4.0           # OpenFOAM version
startTime=20000                 # Start time
precursorDir=/home/daanvanderhoek/OpenFOAM/daanvanderhoek-2.4.0/precursorCases/neutral_9kmx9kmx1km_Amalia_10ms
updateBCType=1                  # Boolean for whether or not the boundary condition types will be updated over 
                                #    what is in the initial conditions files. Leave it 0 for precursors.
inflowDir='southwest'                # For inflow/outflow cases, specify the inflow direction.  Choices are 'west',
                                #   'east', 'south', 'west', 'southWest', 'northWest', 'southEast', and
                                #   'northEast'.  There is a 'cyclic' option too in case you need to change
                                #    back to cyclic or simply update the number of boundary face entries.
localRefinementLevels=1        # Number of levels of local refinement (requires system/topoSetDict and 
                                #    system/refineHexMeshDict).
globalRefinementLevels=0
cores=1


# Define a function for mesh refinement: Local refinement performed on one core.
refineMeshLocal()
{
   i=$1
   while [ $i -ge 1 ]
   do
      echo "   -Performing level $i local refinement with topoSet/refineHexMesh"
      echo "      *selecting cells to refine..."
      topoSet -dict system/topoSetDict.local.$i > log.topoSet.local.$i 2>&1

      echo "      *refining cells..."
      refineHexMesh local -overwrite > log.refineHexMesh.local.$i 2>&1

      let i=i-1
   done
}

# Load the OpenFOAM module on the cluster
echo "Loading the OpenFOAM module..."
module load openfoam/2.4.0

# Copy the controlDict.1 (assuming this is the one the actual solver will start
# out with) to controlDict.  OpenFOAM reads "controlDict", not the numbered ones.
echo "Getting the control dictionary ready..."
cp system/controlDict.1 system/controlDict

# Copy the "clean" .original initial fields to a working copy.  OpenFOAM does not
# read the ".original" initial fields--that's why they remain clean.
echo "Getting the initial condition directory from the precursor..."
rm -rf $startTime
cp -rf $precursorDir/$startTime $startTime
chmod -R 755 $startTime

# Build the mesh.
echo "Copy the the base mesh from the precursor..."
rm -rf constant/polyMesh
cp -rf $precursorDir/constant/polyMesh ./constant
chmod -R 755 constant/polyMesh

# Get the inflow data linked up.
echo "Linking the inflow data with this directory..."
ln -s $precursorDir/drivingData/boundaryData ./constant

# Get the driving source terms linked up.
echo "Linking the driving source terms with this directory..."
ln -s $precursorDir/drivingData/sources ./constant

# The initial fields come from the precursor which is periodic on all sides.  The turbine
# case has inflow and outflow.  Call the changeDictionary utility to update for inflow/outflow..
if [ $updateBCType -eq 1 ]
   then
   echo "Using changeDictionary to update boundary conditions..."
   changeDictionary -dict system/changeDictionaryDict.updateBCs.$inflowDir -time $startTime -enableFunctionEntries > log.changeDictionary.updateBCs.$inflowDir.1 2>&1
fi

# Do serial local refinement
echo "Using refineHexMesh to perform " $localRefinementLevels " of local refinement..."
refineMeshLocal $localRefinementLevels

# Renumber the mesh.
echo "Using renumberMesh to renumber the mesh for better matrix conditioning..."
renumberMesh -overwrite -time $startTime > log.renumberMesh 2>&1

# Decompose the mesh and solution files (serial)
echo "Using decomposePar to decompose the problem for parallel processing..."
decomposePar -cellDist -force -time $startTime > log.decomposePar 2>&1

# Check the mesh
echo "Running checkMesh to report mesh diagnostics..."
checkMesh > log.checkMesh.1 2>&1